#!/usr/bin/env bin/rails runner

# Quick and dirty script to fetch old data and recalc competitions
require_relative "./competitions"

def fetch_data
  Dir.chdir("tmp/db") do
    unless File.exist?("bushtit_obra_sql")
      puts `scp nutcracker.rocketsurgeryllc.com:/mnt/bak4/daily/bushtit_obra_sql-2018-12-05.tar.gz .`
      puts `tar xf bushtit_obra_sql-2018-12-05.tar.gz`
    end
  end
end

def recreate_databases
  puts `spring stop`
  puts `mysql -u root -e 'set foreign_key_checks = 0; drop database if exists obra_development'`
  puts `mysql -u root -e 'set foreign_key_checks = 0; drop database if exists obra_test'`
  puts `bundle exec rake db:setup RAILS_ENV=development`
  puts `mysql -u root obra_development < tmp/db/production.sql`
  puts `bundle exec rake db:migrate`
end

def destroy_calculations
  ResultSource.delete_all
  Result.where(year: 2019).delete_all
  Result.where("created_at > ?", Date.new(2019)).delete_all
  Race.where("created_at > ?", Date.new(2019)).delete_all

  Calculations::V3::Calculation.all.each do |calc|
    calc.event&.destroy_races
    calc.event&.destroy!
    calc.destroy!
  end
end

def create_calculations(competitions)
  calculations = []

  competitions.values.each do |competition|
    calculation = create_calculation(competition[:event_id], competition[:rules])
    competition[:calculation] = calculation

    competition[:categories].each do |category_definition|
      category = Category.find_or_create_by(name: category_definition[:name])
      calculation_category = Calculations::V3::Category.new(
        category: category,
        maximum_events: category_definition[:maximum_events],
        reject: category_definition[:reject] || false
      )
      calculation.calculation_categories << calculation_category
    end

    competition[:events].each do |event|
      calculation_event = Calculations::V3::Event.new(event: Event.find(event[:id]), multiplier: event[:multiplier])
      calculation.calculations_events << calculation_event
    end

    calculations << calculation
  end

  calculations
end

def create_calculation(event_id, rules)
  if rules[:discipline]
    rules[:discipline] = Discipline.find_by!(name: rules[:discipline])
  end

  rules[:year] = 2018

  if event_id
    event = Event.find(event_id)
    event.calculations.create!(rules)
  else
    Calculations::V3::Calculation.create!(rules)
  end
end

def compare_results(competitions)
  competitions.values.each do |competition|
    expected_event = Competitions::Competition.find(competition[:competition_id])
    actual_event = competition[:calculation].event
    compare_event_results expected_event, actual_event
  end
end

def compare_event_results(expected_event, actual_event)
  expected_races = expected_event.races.sort
  actual_races = actual_event.races.reject(&:rejected?).select(&:visible?).sort

  expected_categories = expected_races.map(&:name).sort
  actual_categories = actual_races.map(&:name).sort

  if expected_categories != actual_categories
    puts "#{actual_event.full_name} races"
    puts "expected: #{expected_categories}"
    puts "actual:   #{actual_categories}"
    if expected_categories.size > actual_categories.size
      puts "diff:     #{expected_categories - actual_categories}"
    else
      puts "diff:     #{actual_categories - expected_categories}"
    end
  end

  expected_races.each do |expected_race|
    actual_race = actual_races.detect { |r| r.name == expected_race.name }
    next unless actual_race

    # GPCD Elite Juniors accidentally skipped in 2018
    next if expected_race.id == 614_969 || expected_race.id == 614_970

    expected_results = expected_race.results.reject { |r| r.points == 0 }.map { |result| [result.place, result.person_id, result.points] }.sort
    actual_results = actual_race.results
                                .reject { |r| r.points == 0 }
                                .reject(&:rejected?)
                                .map { |result| [result.place, result.person_id, result.points] }
                                .sort

    if expected_results.size != actual_results.size
      puts "Expected #{actual_race.name} to have #{expected_results.size} results, but has #{actual_results.size} in event #{actual_race.event_id}"
    end

    if expected_results != actual_results
      puts "#{expected_event.full_name} #{expected_event.id} #{expected_race.name} #{expected_race.id} results in event #{actual_race.event_id}"
      puts "expected:"
      pp expected_results
      puts "actual:"
      pp actual_results
      puts "diff:"
      if expected_results.size > actual_results.size
        pp expected_results - actual_results
      else
        pp actual_results - expected_results
      end
    end
  end
end

# fetch_data
# recreate_databases
destroy_calculations
calculations = create_calculations(COMPETITIONS)
calculations.map(&:source_event).compact.each(&:update_date)
calculations.each(&:calculate!)
compare_results(COMPETITIONS)
