#!/usr/bin/env bin/rails runner

# Quick and dirty script to fetch old data and recalc competitions

competitions = {
  blind_date: {
    categories: [
      "Category 1/2 Men",
      "Category 2/3 Men",
      "Category 3/4 Men",
      "Category 5 Men",
      "Junior Men 14-18",
      "Junior Men 9-13",
      "Junior Women 14-18",
      "Junior Women 9-13",
      "Masters Men 1/2 40+",
      "Masters Men 2/3 40+",
      "Masters Men 3/4 40+",
      "Masters Men 50+",
      "Masters Men 60+",
      "Singlespeed",
      "Stampede",
      "Women 1/2",
      "Women 3",
      "Women 4",
      "Women 5"
    ],
    competition_id: 26_417,
    event_id: 26_208,
    rules: {
      points_for_place: [15, 12, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
      reject_worst_results: 1
    }
  },
  cross_crusade: {
    categories: [
      "Athena",
      "Clydesdale",
      "Elite Junior Men",
      "Elite Junior Women",
      "Junior Men 3/4/5",
      "Junior Women 3/4/5",
      "Junior Men 10-12",
      "Junior Men 13-14",
      "Junior Men 15-16",
      "Junior Men 17-18",
      "Junior Men 9",
      "Junior Women 10-12",
      "Junior Women 13-14",
      "Junior Women 15-16",
      "Junior Women 17-18",
      "Junior Women 9",
      "Masters 35+ 1/2",
      "Masters 35+ 3",
      "Masters 35+ 4",
      "Masters 50+",
      "Masters 60+",
      "Masters 70+",
      "Masters Women 35+ 1/2",
      "Masters Women 35+ 3",
      "Masters Women 50+",
      "Masters Women 60+",
      "Men 1/2",
      "Men 2/3",
      "Men 4",
      "Men 5",
      "Singlespeed Women",
      "Singlespeed",
      "Women 1/2",
      "Women 2/3",
      "Women 4",
      "Women 5"
    ],
    competition_id: 26_440,
    event_id: 25_896,
    rejected_categories: ["Junior Men 9-12 3/4/5", "Junior Women 9-12 3/4/5"],
    rules: {
      minimum_events: 3,
      points_for_place: [26, 20, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
      reject_worst_results: 1
    }
  },
  gpcd: {
    categories: [
      "Athena",
      "Category 1/2 35+ Men",
      "Category 1/2 35+ Women",
      "Category 1/2 Men",
      "Category 1/2 Women",
      "Category 2/3 Men",
      "Category 2/3 Women",
      "Category 3 35+ Men",
      "Category 3 35+ Women",
      "Category 3 Women",
      "Category 4 35+ Men",
      "Category 4 Men",
      "Category 4 Women",
      "Category 5 Men",
      "Category 5 Women",
      "Clydesdale",
      "Elite Junior Men",
      "Elite Junior Women",
      "Junior Men 3/4/5",
      "Junior Women 3/4/5",
      "Masters 50+ Men",
      "Masters 50+ Women",
      "Masters 60+ Men",
      "Masters 60+ Women",
      "Singlespeed Men",
      "Singlespeed Women"
    ],
    competition_id: 26_421,
    event_id: 26_278,
    rules: {
      minimum_events: 4,
      points_for_place: [100, 80, 60, 50, 45, 40, 36, 32, 29, 26, 24, 22, 20, 18, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
      reject_worst_results: 1
    }
  },
  tabor: {
    categories: [
      "Senior Men",
      "Category 3 Men",
      "Category 4 Men",
      "Category 4/5 Women",
      "Category 5 Men",
      "Masters Men 50+",
      "Masters Men 40+",
      "Senior Women"
    ],
    competition_id: 26_299,
    event_id: 26_072,
    rules: {
      double_points_for_last_event: true,
      points_for_place: [100, 70, 50, 40, 36, 32, 28, 24, 20, 16, 15, 14, 13, 12, 11]
    }
  }
}

def fetch_data
  Dir.chdir("tmp/db") do
    unless File.exist?("bushtit_obra_sql")
      puts `scp nutcracker.rocketsurgeryllc.com:/mnt/bak4/daily/bushtit_obra_sql-2018-12-05.tar.gz .`
      puts `tar xf bushtit_obra_sql-2018-12-05.tar.gz`
    end
  end
end

def recreate_databases
  puts `spring stop`
  puts `mysql -u root -e 'set foreign_key_checks = 0; drop database if exists obra_development'`
  puts `mysql -u root -e 'set foreign_key_checks = 0; drop database if exists obra_test'`
  puts `bundle exec rake db:setup RAILS_ENV=development`
  puts `mysql -u root obra_development < tmp/db/production.sql`
  puts `bundle exec rake db:migrate`
end

def destroy_calculations
  ResultSource.destroy_all
  Result.where(year: 2019).destroy_all
  Result.where("created_at > ?", Date.new(2019)).destroy_all
  Race.where("created_at > ?", Date.new(2019)).destroy_all

  Calculations::V3::Calculation.all.each do |calc|
    calc.event&.destroy_races
    calc.event&.destroy!
    calc.destroy!
  end
end

def create_calculations(competitions)
  calculations = []

  competitions.values.each do |competition|
    event = Event.find(competition[:event_id])
    calculation = event.calculations.create!(competition[:rules])
    competition[:categories].each do |category_name|
      calculation.categories << Category.find_or_create_by(name: category_name)
    end
    competition[:rejected_categories]&.each do |category_name|
      calculation.rejected_categories << Category.find_or_create_by(name: category_name)
    end
    calculations << calculation
  end

  calculations
end

def compare_results(competitions)
  competitions.values.each do |competition|
    expected_event = Competitions::Competition.find(competition[:competition_id])
    actual_event = Event.find(competition[:event_id]).calculations.first.event
    compare_event_results expected_event, actual_event
  end
end

def compare_event_results(expected_event, actual_event)
  expected_races = expected_event.races.sort
  actual_races = actual_event.races.reject(&:rejected?).sort

  expected_categories = expected_races.map(&:name).sort
  actual_categories = actual_races.map(&:name).sort

  if expected_categories != actual_categories
    puts "#{actual_event.full_name} races"
    puts "expected: #{expected_categories}"
    puts "actual:   #{actual_categories}"
    if expected_categories.size > actual_categories.size
      puts "diff:     #{expected_categories - actual_categories}"
    else
      puts "diff:     #{actual_categories - expected_categories}"
    end
  end

  expected_races.each do |expected_race|
    actual_race = actual_races.detect { |r| r.name == expected_race.name }
    next unless actual_race

    # GPCD Elite Juniors accidentally skipped in 2018
    if expected_race.id == 623682 || expected_race.id == 623683
      return
    end

    expected_results = expected_race.results.reject { |r| r.points == 0 }.map { |result| [result.place, result.person_id, result.points]}.sort
    actual_results = actual_race.results.reject { |r| r.points == 0 }.reject(&:rejected?).map { |result| [result.place, result.person_id, result.points]}.sort
    if expected_results.size != actual_results.size
      puts "Expected #{actual_race.name} to have #{expected_results.size} results, but has #{actual_results.size}"
    end

    if expected_results != actual_results
      puts "#{expected_event.full_name} #{expected_race.name} results"
      puts "expected:"
      pp expected_results
      puts "actual:"
      pp actual_results
      puts "diff:"
      if expected_results.size > actual_results.size
        pp expected_results - actual_results
      else
        pp actual_results - expected_results
      end
    end
  end
end

# fetch_data
# recreate_databases
destroy_calculations
calculations = create_calculations(competitions)
calculations.map(&:source_event).each(&:update_date)
calculations.each(&:calculate!)
compare_results(competitions)
