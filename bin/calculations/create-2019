#!/usr/bin/env bundle exec bin/rails runner

# Quick and dirty script to fetch old data and recalc competitions
require_relative "./competitions_2019"

def fix_source_results
  bad_category = ::Category.find_by(name: "40+Singlespeed Men")
  if bad_category
    good_category = ::Category.find_by(name: "Singlespeed Men 40+")
    Race.where(category_id: bad_category.id).each do |race|
      race.category = good_category
      race.save!
    end
    bad_category.destroy!
  end

  bad_category = ::Category.find_by(name: "Wome 1/2/3")
  if bad_category
    good_category = ::Category.find_by(name: "Women 1/2/3")
    Race.where(category_id: bad_category.id).each do |race|
      race.category = good_category
      race.save!
    end
    bad_category.destroy!
  end

  Category.where("name like '%fix%'").update_all(equipment: "Fixed Gear")

  Event.where(id: 26709).update_all(discipline: "Criterium")
  category = Category.find_or_create_by_normalized_name("Category 2 Women Junior 14-18")
  Race.where(id: 623944).update_all(category_id: category.id)
  category = Category.find_or_create_by_normalized_name("Women 3")
  Race.where(id: 446659).update_all(category_id: category.id)
  Category.where("name like '%fix%'").update_all(equipment: "Fixed Gear")
  if Event.exists?(27077)
    Race.where(event_id: 27077).update_all(event_id: 27011)
    Result.where(event_id: 27077).update_all(event_id: 27011)
    Event.destroy(27077)
  end
end

def create_calculations(competitions)
  competitions.each do |key, competition|
    next if Calculations::V3::Calculation.where(key: key).exists?

    competition[:rules][:key] = key
    calculation = create_calculation(competition[:event_id], competition[:rules], competition[:name])

    competition[:categories]&.each do |category_definition|
      category = Category.find_or_create_by_normalized_name(category_definition[:name])
      calculation_category = Calculations::V3::Category.new(
        category: category,
        maximum_events: category_definition[:maximum_events],
        reject: category_definition[:reject] || false
      )
      calculation.calculation_categories << calculation_category
    end

    competition[:events]&.each do |event|
      calculation_event = Calculations::V3::Event.new(event: Event.find(event[:id]), multiplier: event[:multiplier])
      calculation.calculations_events << calculation_event
    end
  end
end

def create_calculation(event_id, rules, name)
  attributes = rules.dup

  puts "create_calculation #{name}"
  if rules[:discipline]
    attributes[:discipline] = Discipline.where(name: rules[:discipline]).first!
  end
  if rules[:disciplines]
    attributes[:disciplines] = Discipline.where(name: rules[:disciplines])
  end

  attributes[:name] = name
  attributes[:year] = 2019

  if event_id
    event = Event.find(event_id)
    event.calculations.create!(attributes)
  else
    Calculations::V3::Calculation.create!(attributes)
  end
end

def calculations(competitions)
  Calculations::V3::Calculation.where(key: competitions.keys).all
end

def compare_results(competitions)
  competitions.each do |key, competition|
    next unless competition[:competition_id]

    expected_event = Event.find(competition[:competition_id])
    actual_event = Calculations::V3::Calculation.where(key: key).first&.event

    if actual_event
      unless key.in? %i[age_graded_bar overall_bar]
        compare_source_events(expected_event, actual_event, competition, key)
      end
      # compare_event_results expected_event, actual_event
    else
      puts "Could not find actual event for #{key}"
    end
  end
end

def destroy_calculations
  puts "destroy_calculations"
  ResultSource.delete_all
  Result.where("created_at > ?", 1.day.ago).delete_all
  Race.where("created_at > ?", 1.day.ago).delete_all

  Calculations::V3::Calculation.all.each do |calc|
    calc.event&.destroy_races
    calc.event&.destroy!
    calc.destroy!
  end
end

competitions = COMPETITIONS
# competitions = {
#   cyclocross_bar: COMPETITIONS[:cyclocross_bar]
# }

fix_source_results
destroy_calculations
create_calculations competitions
calculations(competitions).map(&:source_event).compact.each(&:update_date)
calculations(competitions).reject do |c|
  (c.key != "overall_bar" && c.key != "age_graded_bar" && c.key["bar"]) ||
  (c.key != "gpcd_team" && c.key != "gpcd" && c.key["gpcd"])
end.each(&:calculate!)
# calculations(competitions).each(&:calculate!)
