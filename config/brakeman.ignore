{
  "ignored_warnings":[
    {
      "warning_type":"Redirect",
      "warning_code":18,
      "fingerprint":"1cb9fa313c87644fc948cdfdc1c96e9edf27d8de74c3135465e62b8de392dd6a",
      "message":"Possible unprotected redirect",
      "file":"app/controllers/competitions/bar_controller.rb",
      "line":18,
      "link":"http://brakemanscanner.org/docs/warning_types/redirect/",
      "code":"redirect_to(\"http://#{RacingAssociation.current.static_host}/bar/#{@year}/overall_by_age.html\")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"Competitions::BarController",
        "method":"show"
      },
      "user_input":"RacingAssociation.current.static_host",
      "confidence":"High",
      "note":""
    },
    {
      "warning_type":"Redirect",
      "warning_code":18,
      "fingerprint":"ead2ff6844add83d99527c47a7997af62f0e7c1bf33a42f57829bae9ffd49b39",
      "message":"Possible unprotected redirect",
      "file":"app/controllers/competitions/bar_controller.rb",
      "line":20,
      "link":"http://brakemanscanner.org/docs/warning_types/redirect/",
      "code":"redirect_to(\"http://#{RacingAssociation.current.static_host}/bar/#{@year}\")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"Competitions::BarController",
        "method":"show"
      },
      "user_input":"RacingAssociation.current.static_host",
      "confidence":"High",
      "note":""
    },
    {
      "warning_type":"SQL Injection",
      "warning_code":0,
      "fingerprint":"02bd2e3deb8c695ce116a557b43eccbfec9049d86225d3958033772a1a25eb86",
      "message":"Possible SQL injection",
      "file":"app/models/competitions/competition.rb",
      "line":328,
      "link":"http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code":"Competitions::Score.delete_all(\"competition_result_id in (select id from results where race_id in (#{races.select do\n (not race.name.in?(race_category_names))\n end.map(&:id).join(\",\")}))\")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"Competitions::Competition",
        "method":"delete_races"
      },
      "user_input":"races.select do\n (not race.name.in?(race_category_names))\n end.map(&:id).join(\",\")",
      "confidence":"Medium",
      "note":""
    },
    {
      "warning_type":"SQL Injection",
      "warning_code":0,
      "fingerprint":"632a9da715e0548db0b20801dee090aca6cf74d0301996e70836580aecf303bb",
      "message":"Possible SQL injection",
      "file":"app/models/competitions/competition.rb",
      "line":189,
      "link":"http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code":"Result.select(\"distinct results.id as id\", \"1 as multiplier\", \"age\", \"categories.ability as category_ability\", \"categories.ages_begin as category_ages_begin\", \"categories.ages_end as category_ages_end\", \"categories.gender as category_gender\", \"events.bar_points as event_bar_points\", \"events.date\", \"events.discipline\", \"events.type\", \"gender\", \"member_from\", \"member_to\", \"parents_events.bar_points as parent_bar_points\", \"parents_events_2.bar_points as parent_parent_bar_points\", \"people.gender as person_gender\", \"people.name as person_name\", \"points_factor\", \"races.bar_points as race_bar_points\", \"results.#{participant_id_attribute} as participant_id\", \"results.event_id\", \"place\", \"results.points\", \"results.race_id\", \"results.race_name as category_name\", \"results.year\", \"team_member\", \"team_name\")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"Competitions::Competition",
        "method":"source_results_query"
      },
      "user_input":"participant_id_attribute",
      "confidence":"Medium",
      "note":""
    },
    {
      "warning_type":"SQL Injection",
      "warning_code":0,
      "fingerprint":"7cc5dadf1ecb785f90294746aa2287241023180ff4378be5d4ee9863adcc0b31",
      "message":"Possible SQL injection",
      "file":"app/models/competitions/competition.rb",
      "line":238,
      "link":"http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code":"Result.select(\"distinct results.id as id\", \"1 as multiplier\", \"events.bar_points as event_bar_points\", \"events.date\", \"events.type\", \"member_from\", \"member_to\", \"parents_events.bar_points as parent_bar_points\", \"parents_events_2.bar_points as parent_parent_bar_points\", \"place\", \"points_factor\", \"races.bar_points as race_bar_points\", \"results.#{participant_id_attribute} as participant_id\", \"results.event_id\", \"results.points\", \"results.race_id\", \"results.race_name as category_name\", \"results.year\", \"team_member\", \"team_name\", \"true as upgrade\")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"Competitions::Competition",
        "method":"add_upgrade_results"
      },
      "user_input":"participant_id_attribute",
      "confidence":"Medium",
      "note":""
    },
    {
      "warning_type":"SQL Injection",
      "warning_code":0,
      "fingerprint":"e0e34e6bb4ae9249c358e0df1800bb1eedbc5d23125b340e7859523be57dc391",
      "message":"Possible SQL injection",
      "file":"app/models/weekly_series.rb",
      "line":40,
      "link":"http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code":"WeeklySeries.connection.select_values(\"\\n          select distinct (DAYOFWEEK(date) - 1) as day_of_week\\n          from events\\n          where parent_id=#{self.id} and date between '#{date_range.begin.to_s(:db)}' and '#{date_range.end.to_s(:db)}'\\n          order by day_of_week\")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"WeeklySeries",
        "method":"days_of_week"
      },
      "user_input":"date_range.begin",
      "confidence":"Medium",
      "note":""
    },
    {
      "warning_type":"Remote Code Execution",
      "warning_code":24,
      "fingerprint":"d28a2f0f7ecaf48a07d28e2f7343c41d7eb3584c4d9475210b795bc102983e34",
      "message":"Unsafe reflection method const_get called with parameter value",
      "file":"app/controllers/admin/events_controller.rb",
      "line":291,
      "link":"http://brakemanscanner.org/docs/warning_types/remote_code_execution/",
      "code":"Object.const_get(((params[:event][:type] or \"Event\") or \"SingleDayEvent\"))",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"Admin::EventsController",
        "method":"assign_new_event"
      },
      "user_input":"params[:event][:type]",
      "confidence":"High",
      "note":""
    },
    {
      "warning_type":"Cross Site Scripting",
      "warning_code":2,
      "fingerprint":"868c2e44847a31b8f045e250855f3ec84820c67d2d14b2939dfb18b998315f73",
      "message":"Unescaped model attribute",
      "file":"app/views/admin/pages/versions/edit.html.erb",
      "line":17,
      "link":"http://brakemanscanner.org/docs/warning_types/cross_site_scripting",
      "code":"Page::Version.find(params[:id]).versioned.body",
      "render_path":[{"type":"controller","class":"Admin::Pages::VersionsController","method":"edit","line":10,"file":"app/controllers/admin/pages/versions_controller.rb"}],
      "location":{
        "type":"template",
        "template":"admin/pages/versions/edit"
      },
      "user_input":"Page::Version.find(params[:id])",
      "confidence":"Weak",
      "note":""
    },
    {
      "warning_type":"Cross Site Scripting",
      "warning_code":2,
      "fingerprint":"c4267d90c079d37a4af6fe65ba7a1b617ba05a6096b880fe42ccb1e8cf1e87b9",
      "message":"Unescaped model attribute",
      "file":"app/views/article_categories/_article.html.erb",
      "line":2,
      "link":"http://brakemanscanner.org/docs/warning_types/cross_site_scripting",
      "code":"truncate(ArticleCategory.new.body, :length => 800, :separator => \" \")",
      "render_path":[{"type":"controller","class":"ArticleCategoriesController","method":"show","line":14,"file":"app/controllers/article_categories_controller.rb"},{"type":"template","name":"article_categories/show","line":7,"file":"app/views/article_categories/show.html.erb"}],
      "location":{
        "type":"template",
        "template":"article_categories/_article"
      },
      "user_input":"ArticleCategory.new.body",
      "confidence":"High",
      "note":""
    },
    {
      "warning_type":"Cross Site Scripting",
      "warning_code":2,
      "fingerprint":"b5aab46786fd773d58e93cc5a4b504926527936b34be017410e6d59d9ae9797d",
      "message":"Unescaped model attribute",
      "file":"app/views/articles/show.html.erb",
      "line":3,
      "link":"http://brakemanscanner.org/docs/warning_types/cross_site_scripting",
      "code":"Article.where(:id => params[:id]).first.title",
      "render_path":[{"type":"controller","class":"ArticlesController","method":"show","line":10,"file":"app/controllers/articles_controller.rb"}],
      "location":{
        "type":"template",
        "template":"articles/show"
      },
      "user_input":null,
      "confidence":"High",
      "note":""
    },
    {
      "warning_type":"Cross Site Scripting",
      "warning_code":2,
      "fingerprint":"32d406867d48d958aab115dfd9d6d236667865dc9a095e929cc1e62eeca04238",
      "message":"Unescaped model attribute",
      "file":"app/views/articles/show.html.erb",
      "line":4,
      "link":"http://brakemanscanner.org/docs/warning_types/cross_site_scripting",
      "code":"Article.where(:id => params[:id]).first.body",
      "render_path":[{"type":"controller","class":"ArticlesController","method":"show","line":10,"file":"app/controllers/articles_controller.rb"}],
      "location":{
        "type":"template",
        "template":"articles/show"
      },
      "user_input":null,
      "confidence":"High",
      "note":""
    },
    {
      "warning_type":"Cross Site Scripting",
      "warning_code":2,
      "fingerprint":"a3792ad73fe3ddb29e74351abf230ba2442451bbefbb3a023981013ad7078fa7",
      "message":"Unescaped model attribute",
      "file":"app/views/results/_result.html.erb",
      "line":3,
      "link":"http://brakemanscanner.org/docs/warning_types/cross_site_scripting",
      "code":"(Unresolved Model).new.render(column).to_s",
      "render_path":[{"type":"template","name":"results/_table","line":10,"file":"app/views/results/_table.html.erb"}],
      "location":{
        "type":"template",
        "template":"results/_result"
      },
      "user_input":null,
      "confidence":"High",
      "note":""
    },
    {
      "warning_type":"Cross Site Scripting",
      "warning_code":2,
      "fingerprint":"e66e37eef4a1017801c70b90eaf0b9e23e78ff6335d0c0c9ab70476bacfd55ad",
      "message":"Unescaped model attribute",
      "file":"app/views/teams/_team.html.erb",
      "line":7,
      "link":"http://brakemanscanner.org/docs/warning_types/cross_site_scripting",
      "code":"(Unresolved Model).new.sponsors",
      "render_path":[{"type":"template","name":"teams/index","line":18,"file":"app/views/teams/index.html.erb"}],
      "location":{
        "type":"template",
        "template":"teams/_team"
      },
      "user_input":null,
      "confidence":"High",
      "note":"Limited to admin users. Does echo raw HTML. Ideally would use Markdown."
    },
    {
      "warning_type":"Dynamic Render Path",
      "warning_code":15,
      "fingerprint":"835c95d303e8533f2bd639bd9f0e0332f003894fefdf715303e12ef0bafb038b",
      "message":"Render path contains parameter value",
      "file":"app/views/admin/posts/index.html.erb",
      "line":30,
      "link":"http://brakemanscanner.org/docs/warning_types/dynamic_render_path/",
      "code":"render(action => Post.where(:mailing_list_id => MailingList.find(params[:mailing_list_id]).id).order(\"date desc\").page(params[:page]), {})",
      "render_path":[{"type":"controller","class":"Admin::PostsController","method":"index","line":7,"file":"app/controllers/admin/posts_controller.rb"}],
      "location":{
        "type":"template",
        "template":"admin/posts/index"
      },
      "user_input":"params[:page]",
      "confidence":"Weak",
      "note":""
    },
    {
      "warning_type":"Format Validation",
      "warning_code":30,
      "fingerprint":"1eb9154d46381ae82a094c398ba1df536a3876bea089d1a5401b92b04d7e8ca4",
      "message":"Insufficient validation for 'from_email' using /@/. Use \\A and \\z as anchors",
      "file":"app/models/post.rb",
      "line":12,
      "link":"http://brakemanscanner.org/docs/warning_types/format_validation/",
      "code":null,
      "render_path":null,
      "location":{
        "type":"model",
        "model":"Post"
      },
      "user_input":null,
      "confidence":"High",
      "note":""
    },
    {
      "warning_type":"Redirect",
      "warning_code":18,
      "fingerprint":"0995340021ac45331856df4aa279a7860dabfd7113eeceb5c2e9dd43ee76a8cc",
      "message":"Possible unprotected redirect",
      "file":"app/controllers/bar_controller.rb",
      "line":19,
      "link":"http://brakemanscanner.org/docs/warning_types/redirect/",
      "code":"redirect_to(\"http://#{RacingAssociation.current.static_host}/bar/#{(params[:year].to_i or RacingAssociation.current.effective_year)}/overall_by_age.html\")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"BarController",
        "method":"show"
      },
      "user_input":"RacingAssociation.current.static_host",
      "confidence":"High",
      "note":""
    },
    {
      "warning_type":"Redirect",
      "warning_code":18,
      "fingerprint":"1ffdc5161e5d9aee8ec32f1b1dc00352d81169621ac9edda7139c489139d80cc",
      "message":"Possible unprotected redirect",
      "file":"app/controllers/bar_controller.rb",
      "line":21,
      "link":"http://brakemanscanner.org/docs/warning_types/redirect/",
      "code":"redirect_to(\"http://#{RacingAssociation.current.static_host}/bar/#{(params[:year].to_i or RacingAssociation.current.effective_year)}\")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"BarController",
        "method":"show"
      },
      "user_input":"RacingAssociation.current.static_host",
      "confidence":"High",
      "note":""
    },
    {
      "warning_type":"SQL Injection",
      "warning_code":0,
      "fingerprint":"286af1d56483a7437eed4acf57591fbc079230754da6f870200f15fed0aa2ab7",
      "message":"Possible SQL injection",
      "file":"app/models/competitions/overall.rb",
      "line":138,
      "link":"http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code":"Result.count_by_sql(\" SELECT count(*) FROM results  \n          JOIN races ON races.id = results.race_id \n          JOIN categories ON categories.id = races.category_id \n          JOIN events ON races.event_id = events.id \n          WHERE categories.id in (#{category_ids_for((local race)).join(\", \")})\n              and events.id in (#{parent.children.collect(&:id).join(\", \")})\n              and results.person_id = #{(local person).id}\n       \")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"Overall",
        "method":"raced_minimum_events?"
      },
      "user_input":"category_ids_for((local race)).join(\", \")",
      "confidence":"Medium",
      "note":""
    },
    {
      "warning_type":"SQL Injection",
      "warning_code":0,
      "fingerprint":"0b2638c8dfc8b2d841f8dd5584a87ddc3e77f863847e2f0e402aedaa445b4283",
      "message":"Possible SQL injection",
      "file":"app/models/competitions/cross_crusade_callups.rb",
      "line":31,
      "link":"http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code":"Result.find_by_sql(\" SELECT results.* FROM results  \n          JOIN races ON races.id = results.race_id \n          JOIN categories ON categories.id = races.category_id \n          JOIN events ON races.event_id = events.id \n          WHERE place between 1 and #{(point_schedule.size - 1)}\n              and categories.id in (#{category_ids_for((local race)).join(\", \")})\n              and events.id in (#{source_events.map(&:id).join(\", \")})\n          order by person_id\n       \")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"CrossCrusadeCallups",
        "method":"source_results"
      },
      "user_input":"(point_schedule.size - 1)",
      "confidence":"Medium",
      "note":""
    },
    {
      "warning_type":"SQL Injection",
      "warning_code":0,
      "fingerprint":"7b40a85c69c8ed5614d545eb9b46e4aa0c7d4159b5add2fe1e3df8f13723b2e0",
      "message":"Possible SQL injection",
      "file":"app/models/competitions/oregon_cup.rb",
      "line":21,
      "link":"http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code":"Result.find_by_sql(\"SELECT results.* FROM results  \n          LEFT OUTER JOIN races ON races.id = results.race_id \n          LEFT OUTER JOIN categories ON categories.id = races.category_id\n          LEFT OUTER JOIN events ON races.event_id = events.id \n            WHERE races.category_id is not null \n              and events.type = 'SingleDayEvent'\n              and place between 1 and 20\n              and categories.id in (#{category_ids_for((local race)).join(\", \")})\n              and (results.category_id is null or results.category_id in (#{category_ids_for((local race)).join(\", \")}))\n              and (events.id in (#{source_events.collect do\n (local event).id\n end.join(\", \")}) or events.parent_id in (#{source_events.collect do\n (local event).id\n end.join(\", \")}))\n         order by person_id\n       \")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"OregonCup",
        "method":"source_results"
      },
      "user_input":"category_ids_for((local race)).join(\", \")",
      "confidence":"Medium",
      "note":""
    },
    {
      "warning_type":"SQL Injection",
      "warning_code":0,
      "fingerprint":"82fa4bd5fad8c65897bfbd516729dc24cf5613cac4be2cfb622d192f3b259917",
      "message":"Possible SQL injection",
      "file":"app/models/competitions/oregon_junior_cyclocross_series.rb",
      "line":10,
      "link":"http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code":"Result.find_by_sql(\" SELECT results.* FROM results  \n          LEFT JOIN races ON races.id = results.race_id \n          LEFT JOIN categories ON categories.id = races.category_id \n          LEFT JOIN events ON races.event_id = events.id \n          WHERE events.id in (#{source_events.map(&:id).join(\",\")})\n            and (place > 0 or place is null or place = '')\n            and categories.id in (#{category_ids_for((local race)).join(\",\")})\n            and (events.type = \"SingleDayEvent\" or events.type = \"Event\")\n            and events.date between '#{year}-01-01' and '#{year}-12-31'\n          order by person_id\n       \")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"OregonJuniorCyclocrossSeries",
        "method":"source_results"
      },
      "user_input":"source_events.map(&:id).join(\",\")",
      "confidence":"Medium",
      "note":""
    },
    {
      "warning_type":"SQL Injection",
      "warning_code":0,
      "fingerprint":"892f797beff8536aba3c60120f09f180c82275850032c3bf1eb073663c50d348",
      "message":"Possible SQL injection",
      "file":"app/models/competitions/overall.rb",
      "line":60,
      "link":"http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code":"Result.find_by_sql(\" SELECT results.* FROM results  \n          JOIN races ON races.id = results.race_id \n          JOIN categories ON categories.id = races.category_id \n          JOIN events ON races.event_id = events.id \n          WHERE place between 1 and #{(point_schedule.size - 1)}\n              and categories.id in (#{category_ids_for((local race)).join(\", \")})\n              and events.id in (#{parent.children.collect do\n (local event).id\n end.join(\", \")})\n          order by person_id\n       \")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"Overall",
        "method":"source_results"
      },
      "user_input":"(point_schedule.size - 1)",
      "confidence":"Medium",
      "note":""
    },
    {
      "warning_type":"SQL Injection",
      "warning_code":0,
      "fingerprint":"7bfc4976df4a881bc5db01157f609788b38c63b66076b8ef93651ddde0fbfb02",
      "message":"Possible SQL injection",
      "file":"app/models/competitions/wsba_barr.rb",
      "line":36,
      "link":"http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code":"Result.find_by_sql(\" SELECT results.*\n          FROM results  \n          LEFT OUTER JOIN races ON races.id = results.race_id \n          LEFT OUTER JOIN categories ON categories.id = races.category_id\n          LEFT OUTER JOIN events ON races.event_id = events.id \n            WHERE races.category_id is not null \n              and members_only_place between 1 and 15\n              and categories.id in (#{category_ids_for((local race)).join(\", \")})\n              and (results.category_id is null or results.category_id in (#{category_ids_for((local race)).join(\", \")}))\n              and (events.id in (#{source_events.map(&:id).join(\", \")}))\n              and results.bar\n         order by person_id\n       \")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"WsbaBarr",
        "method":"source_results"
      },
      "user_input":"category_ids_for((local race)).join(\", \")",
      "confidence":"Medium",
      "note":""
    },
    {
      "warning_type":"SQL Injection",
      "warning_code":0,
      "fingerprint":"cd74d5b87f88af5b5c341a60eef067d569042b55fed5097470718fd829d83dd6",
      "message":"Possible SQL injection",
      "file":"app/models/competitions/bar.rb",
      "line":91,
      "link":"http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code":"Result.select([\"results.id as id\", \"person_id as participant_id\", \"people.member_from\", \"people.member_to\", \"place\", \"results.event_id\", \"race_id\", \"events.date\", \"results.year\", \"coalesce(races.bar_points, events.bar_points, parents_events.bar_points, parents_events_2.bar_points) as multiplier\"]).joins(:race => :event).joins(\"left outer join people on people.id = results.person_id\").joins(\"left outer join events parents_events on parents_events.id = events.parent_id\").joins(\"left outer join events parents_events_2 on parents_events_2.id = parents_events.parent_id\").where(\"place between 1 and ?\", point_schedule.size).where(\"(events.type in (?) or events.type is NULL)\", source_event_types).where(:bar => (true)).where(\"races.category_id in (?)\", category_ids_for((local race))).where(\"events.sanctioned_by\" => (RacingAssociation.current.default_sanctioned_by))",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"Bar",
        "method":"source_results"
      },
      "user_input":"RacingAssociation.current.default_sanctioned_by",
      "confidence":"High",
      "note":""
    },
    {
      "warning_type":"SQL Injection",
      "warning_code":0,
      "fingerprint":"e9e2db15e6c9774e74a27db1b993b31dd3ece95560b0ae9f76251de73994efdc",
      "message":"Possible SQL injection",
      "file":"app/models/competitions/mbra_bar.rb",
      "line":84,
      "link":"http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code":"Result.includes(:race, { :person => :team }, :team, :race => ([{ :event => ({ :parent => :parent }) }, :category])).where(\"\n        (events.type in ('Event', 'SingleDayEvent', 'MultiDayEvent') or events.type is NULL)\n        and bar = true\n        and categories.id in (#{category_ids_for((local race)).join(\", \")})\n        and (events.discipline = '#{(local race).discipline}'\n          or (events.discipline is null and parents_events.discipline = '#{(local race).discipline}')\n          or (events.discipline is null and parents_events.discipline is null and parents_events_2.discipline = '#{(local race).discipline}'))\n        and (races.bar_points > 0\n          or (races.bar_points is null and events.bar_points > 0)\n          or (races.bar_points is null and events.bar_points is null and parents_events.bar_points > 0)\n          or (races.bar_points is null and events.bar_points is null and parents_events.bar_points is null and parents_events_2.bar_points > 0))\n        and events.date between '#{date.year}-01-01' and '#{date.year}-12-31'\n    \")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"MbraBar",
        "method":"source_results"
      },
      "user_input":"category_ids_for((local race)).join(\", \")",
      "confidence":"Medium",
      "note":""
    },
    {
      "warning_type":"SQL Injection",
      "warning_code":0,
      "fingerprint":"1dd5f8800955ba19bdb53af6d5c2c12e1dc456809d96fbcecb25684a8cbe0bce",
      "message":"Possible SQL injection",
      "file":"app/models/competitions/mbra_team_bar.rb",
      "line":57,
      "link":"http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code":"Result.includes(:race, { :person => :team }, :team, :race => ([{ :event => ({ :parent => :parent }) }, :category])).where(\"\n        (events.type in ('Event', 'SingleDayEvent', 'MultiDayEvent') or events.type is NULL)\n        and bar = true\n        and categories.id in (#{category_ids_for((local race)).join(\", \")})\n        and (events.discipline in (#{\"'#{(local race).discipline}'\"})\n          or (events.discipline is null and parents_events.discipline in (#{\"'#{(local race).discipline}'\"}))\n          or (events.discipline is null and parents_events.discipline is null and parents_events_2.discipline in (#{\"'#{(local race).discipline}'\"})))\n        and (races.bar_points > 0\n          or (races.bar_points is null and events.bar_points > 0)\n          or (races.bar_points is null and events.bar_points is null and parents_events.bar_points > 0)\n          or (races.bar_points is null and events.bar_points is null and parents_events.bar_points is null and parents_events_2.bar_points > 0))\n        and events.date between '#{date.year}-01-01' and '#{date.year}-12-31'\n    \")",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"MbraTeamBar",
        "method":"source_results"
      },
      "user_input":"category_ids_for((local race)).join(\", \")",
      "confidence":"Medium",
      "note":""
    },
    {
      "warning_type":"SQL Injection",
      "warning_code":0,
      "fingerprint":"603b27dee2f3e23ae673bad1a02974c359cce6ff2248113e562d2dd6051ff6e1",
      "message":"Possible SQL injection",
      "file":"app/models/event.rb",
      "line":359,
      "link":"http://brakemanscanner.org/docs/warning_types/sql_injection/",
      "code":"SingleDayEvent.where(\"(#{(local change).first}=? or #{(local change).first} is null or #{(local change).first} = '') and parent_id=?\", (local change).last.first, self[:id])",
      "render_path":null,
      "location":{
        "type":"method",
        "class":"Event",
        "method":"update_children"
      },
      "user_input":"(local change).first",
      "confidence":"Medium",
      "note":""
    }
  ],
  "updated":"2015-12-19 20:06:18 -0800",
  "brakeman_version":"3.1.2"
}
